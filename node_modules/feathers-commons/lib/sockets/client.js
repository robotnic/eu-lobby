'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  function Service(options) {
    _classCallCheck(this, Service);

    this.events = _utils.events;
    this.path = options.name;
    this.connection = options.connection;
    this.method = options.method;
  }

  _createClass(Service, [{
    key: 'emit',
    value: function emit() {
      var _connection;

      (_connection = this.connection)[this.method].apply(_connection, arguments);
    }
  }]);

  return Service;
}();

exports.default = Service;

var emitterMethods = ['on', 'once', 'off'];

emitterMethods.forEach(function (method) {
  Service.prototype[method] = function (name, callback) {
    this.connection[method](this.path + ' ' + name, callback);
  };
});

_utils.methods.forEach(function (method) {
  Service.prototype[method] = function () {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var callback = null;
    if (typeof args[args.length - 1] === 'function') {
      callback = args.pop();
    }

    return new Promise(function (resolve, reject) {
      var _connection2;

      args.unshift(_this.path + '::' + method);
      args.push(function (error, data) {
        if (callback) {
          callback(error, data);
        }

        return error ? reject(error) : resolve(data);
      });

      (_connection2 = _this.connection)[_this.method].apply(_connection2, args);
    });
  };
});
module.exports = exports['default'];