/*
 * feathers-swagger
 *
 * Copyright (c) 2014 Glavin Wiechert
 * Licensed under the MIT license.
 */

'use strict';
var path = require('path');

module.exports = function(config) {
    return function() {
        var app = this;
        var services = {};
        config = config || {};

        // Enable the swagger Plugin
        app.enable('feathers swagger');

        // Apply configuration
        var rootDoc = { };
        var basePath = config.basePath || '';
        var docsPath = config.docsPath || '/docs';
        docsPath = path.join(basePath, docsPath);
        
        // Setup docs from config
        rootDoc.swagger= config.swagger|| '2.0';
        rootDoc.info = config.info || {};
        rootDoc.schemes = config.schemes || ['html'];
        rootDoc.host = config.host || "localhost:3030";
        rootDoc.basePath = basePath ;
        rootDoc.definitions = config.definitions || {} ;
        rootDoc.paths={}

        // Create API for Documentation
        app.get(docsPath, function(req, res) {
            res.json(rootDoc);
        });

        // Optional: Register this plugin as a Feathers provider
        app.providers.push(function(path, service) {
            services[path] = service;
            service.docs = service.docs || {};
            // Load documentation from service, if available.
            var doc = service.docs;
		console.log("\n---docs---\n"+JSON.stringify(doc,null,"  ")+"\n-------\n");
            doc.apiVersion = doc.apiVersion || rootDoc.apiVersion;
            doc.resourcePath = doc.resourcePath || '/'+path;
            doc.produces = doc.produces || ['application/json'];

            // Two different types of APIs with Operations.
            var apiWithId = {
                path: '/'+path+'/{resourceId}',
                description: path,
                operations: []
            };
            var apiWithoutId = {
                path: '/'+path,
                description: path,
                operations: []
            };

            // Factory for Operations
            var Operation = function(method, service, defaults)
            {
                defaults = defaults || {};
                // Find is available
                var operation = service.docs[method] || {};
                operation.method = operation.method || defaults.method || method;
                operation.nickname = operation.nickname || defaults.nickname || method+' '+path;
                operation.type = operation.type || defaults.type || 'Object';
                operation.parameters = operation.parameters || defaults.parameters || [];
                operation.summary = operation.summary || defaults.summary || '';
                operation.notes = operation.notes || defaults.notes || '';
                operation.tags = operation.tags || defaults.tags || ["common"];
                operation.errorResponses = operation.errorResponses || defaults.errorResponses || [];
                // Clean up
                //delete service.docs[method]; // Remove `find` from `docs`
                return operation;
            };

            // FIND
            if (typeof service.find === 'function')
            {
                var findOperation = new Operation('find', service, {
                    method: 'GET',
                    type: 'Array',
                    summary: 'Retrieves a list of all resources from the service.',
                    notes: 'Retrieves a list of all resources from the service.'
                });
                // Add Operation to API
                apiWithoutId.operations.push(findOperation);
            }
            // GET
            if (typeof service.get === 'function')
            {
                var getOperation = new Operation('get', service, {
                    method: 'GET',
                    type: 'Object',
                    summary: 'Retrieves a single resource with the given id from the service.',
                    notes: 'Retrieves a single resource with the given id from the service.',
                });
                apiWithId.operations.push(getOperation);
            }
            // CREATE
            if (typeof service.create === 'function')
            {
                var createOperation = new Operation('create', service, {
                    method: 'POST',
                    type: 'Object',
                    summary: 'Creates a new resource with data.',
                    notes: 'Creates a new resource with data.'
                });
                apiWithoutId.operations.push(createOperation);
            }
            // UPDATE
            if (typeof service.update === 'function')
            {
                var updateOperation = new Operation('update', service, {
                    method: 'PUT',
                    type: 'Object',
                    summary: 'Updates the resource identified by id using data.',
                    notes: 'Updates the resource identified by id using data.',
                });
                apiWithId.operations.push(updateOperation);
            }
            // REMOVE
            if (typeof service.remove === 'function')
            {
                var removeOperation = new Operation('remove', service, {
                    method: 'DELETE',
                    type: 'Object',
                    summary: 'Removes the resource with id.',
                    notes: 'Removes the resource with id.',
                });
                apiWithId.operations.push(removeOperation);
            }

            // Add two types of APIs to the service's documentation object.
//console.log("without",apiWithoutId);
//console.log("with",apiWithId);



		//with id
	    var pathObj={ }
	    for(var i=0;i<apiWithoutId.operations.length;i++){
		var operation=apiWithoutId.operations[i];
		console.log("operation without:",operation.method,operation);
		pathObj[operation.method.toLowerCase()]={
			"summary":operation.summary,
			"description":operation.description,
			"parameters":operation.parameters,
			"tags":operation.tags,
		}
	    } 
	    if(apiWithoutId.operations.length > 0){
		    rootDoc.paths[apiWithoutId.path]=pathObj;
	    }


		//without id
	    var pathObj={ }
	    for(var i=0;i<apiWithId.operations.length;i++){
		var operation=apiWithId.operations[i];
		console.log("operation:",operation.method,operation);
		pathObj[operation.method.toLowerCase()]={
			"summary":operation.summary,
			"description":operation.description,
			"parameters":operation.parameters,
			"tags":operation.tags,
		}
	    } 
	    if(apiWithId.operations.length > 0){
	    	rootDoc.paths[apiWithId.path]=pathObj;
	    }


 //           doc.apis.push(apiWithoutId);
  //          doc.apis.push(apiWithId);
	    

            // Add the service to the list of available APIs in the root documentaion object.
/*
            rootDoc.apis.push({
                'path': doc.path || '/'+path,
                'description': doc.description || 'Operations about this resource.'
            });
*/

            // Create handler for serving the service's documentation
            app.get(docsPath+'/'+path, function(req, res) {
                res.json(doc);
            });

        });

    };
};
