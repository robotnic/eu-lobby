'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('feathers:configuration');

exports.default = module.exports = function (root) {
  var configFolder = arguments.length <= 1 || arguments[1] === undefined ? 'config' : arguments[1];

  return function () {
    var app = this;
    var env = app.settings.env;
    var config = require(_path2.default.join(root, configFolder, 'default.json'));

    debug('Initializing configuration for ' + env + ' environment');

    // Dev is our default development. For everything else extend the default
    if (env !== 'development') {
      var envConfig = _path2.default.join(root, configFolder, env + '.json');
      // We can use sync here since configuration only happens once at startup
      if (_fs2.default.existsSync(envConfig)) {
        _extends(config, require(envConfig));
      } else {
        debug('Configuration file for ' + env + ' environment not found at ' + envConfig);
      }
    }

    Object.keys(config).forEach(function (name) {
      var value = config[name];

      if (process.env[value]) {
        value = process.env[value];
      }

      // Make relative paths absolute
      if (typeof value === 'string' && (value.indexOf('.' + _path2.default.sep) === 0 || value.indexOf('..' + _path2.default.sep) === 0)) {
        value = _path2.default.resolve(_path2.default.join(root, configFolder), value);
      }

      debug('Setting ' + name + ' configuration value to', value);

      app.set(name, value);
    });
  };
};