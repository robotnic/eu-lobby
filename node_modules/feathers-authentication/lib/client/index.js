'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var authOptions = Object.assign({}, defaults, options);

  return function () {
    var app = this;

    app.authenticate = function (options) {
      if (!options.type) {
        throw new Error('You need to provide a `type` attribute when calling app.authenticate()');
      }

      var endPoint = undefined;

      if (options.type === 'local') {
        endPoint = authOptions.localEndpoint;
      } else if (options.type === 'token') {
        endPoint = authOptions.tokenEndpoint;
      } else {
        throw new Error('Unsupported authentication \'type\': ' + options.type);
      }

      return new Promise(function (resolve, reject) {
        // TODO (EK): Handle OAuth logins

        // If we are using a REST client
        if (app.rest) {
          return app.service(endPoint).create(options).then(function (response) {
            _utils2.default.setToken(response.token);
            _utils2.default.setUser(response.data);

            return resolve(response);
          }).catch(reject);
        }

        if (app.io || app.primus) {
          var transport = app.io ? 'io' : 'primus';

          app[transport].on('unauthorized', function (error) {
            // console.error('Unauthorized', error);
            return reject(error);
          });

          app[transport].on('authenticated', function (response) {
            // console.log('authenticated', response);
            _utils2.default.setToken(response.token);
            _utils2.default.setUser(response.data);

            return resolve(response);
          });
        }

        // If we are using socket.io
        if (app.io) {
          // If we aren't already connected then throw an error
          if (!app.io.connected) {
            throw new Error('Socket not connected');
          }

          app.io.on('disconnect', function (error) {
            // console.error('Socket disconnected', error);
            return reject(error);
          });

          app.io.emit('authenticate', options);
        }

        // If we are using primus
        if (app.primus) {
          // If we aren't already connected then throw an error
          if (app.primus.readyState !== 3) {
            throw new Error('Socket not connected');
          }

          app.primus.on('close', function (error) {
            console.error('Socket disconnected', error);
            return reject(error);
          });

          app.primus.send('authenticate', options);
        }
      });
    };

    app.user = function () {
      return _utils2.default.getUser();
    };

    app.logout = function () {
      // remove user and token from localstorage
      // on React native it's async storage
      _utils2.default.clearToken();
      _utils2.default.clearUser();
    };

    // Set up hook that adds adds token and user to params so that
    // it they can be accessed by client side hooks and services
    app.mixins.push(function (service) {
      service.before(_hooks2.default.populateParams());
    });

    // Set up hook that adds authorization header for REST provider
    if (app.rest) {
      app.mixins.push(function (service) {
        service.before(_hooks2.default.populateHeader());
      });
    }
  };
};

var _hooks = require('./hooks');

var _hooks2 = _interopRequireDefault(_hooks);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaults = {
  // userEndpoint: '/users',
  localEndpoint: '/auth/local',
  tokenEndpoint: '/auth/token'
};

module.exports = exports['default'];