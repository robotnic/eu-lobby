'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mixin;

var _feathersCommons = require('feathers-commons');

var _methods = require('./methods');

var _events = require('./events');

function socketMixin(service) {
  if (typeof service.mixin !== 'function') {
    return;
  }

  service.mixin({
    setup: function setup(app, path) {
      var _this = this;

      var info = app._socketInfo;
      var mountpath = app.mountpath !== '/' && typeof app.mountpath === 'string' ? app.mountpath : '';
      var fullPath = (0, _feathersCommons.stripSlashes)(mountpath + '/' + path);
      var setupSocket = function setupSocket(socket) {
        _methods.setupMethodHandlers.call(app, info, socket, fullPath, _this);
      };

      // Set up event handlers for this service
      _events.setupEventHandlers.call(app, info, fullPath, this);
      // For a new connection, set up the service method handlers
      info.connection().on('connection', setupSocket);
      // For any existing connection add method handlers
      (0, _feathersCommons.each)(info.clients(), setupSocket);

      if (typeof this._super === 'function') {
        return this._super.apply(this, arguments);
      }
    }
  });
}

function mixin() {
  var app = this;

  app.mixins.push(socketMixin);
  app.mixins.push(_events.filterMixin);

  // When mounted as a sub-app, override the parent setup so you don't have to call it
  app.on('mount', function (parent) {
    var oldSetup = parent.setup;

    parent.setup = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var result = oldSetup.apply(this, args);
      app.setup.apply(app, args);
      return result;
    };
  });
}

mixin.socketMixin = socketMixin;
module.exports = exports['default'];