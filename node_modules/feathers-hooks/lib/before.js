'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (app) {
  return function (service) {
    if (typeof service.mixin !== 'function') {
      return;
    }

    var methods = this.methods;
    var old = service.before;
    var mixin = {};

    (0, _commons.addHookMethod)(service, 'before', methods);

    methods.forEach(function (method) {
      if (typeof service[method] !== 'function') {
        return;
      }

      mixin[method] = function () {
        var _super = this._super.bind(this);
        var hookObject = _feathersCommons.hooks.hookObject(method, 'before', arguments);
        var hooks = this.__beforeHooks[method];

        hookObject.app = app;

        // Run all hooks
        var promise = _commons.processHooks.call(this, hooks, hookObject);

        // Then call the original method
        return promise.then(function (hookObject) {
          return new Promise(function (resolve, reject) {
            var args = _feathersCommons.hooks.makeArguments(hookObject);

            // We replace the callback with resolving the promise
            args.splice(args.length - 1, 1, function (error, result) {
              if (error) {
                reject(error);
              } else {
                hookObject.result = result;
                resolve(hookObject);
              }
            });

            _super.apply(undefined, _toConsumableArray(args));
          });
        });
      };
    });

    service.mixin(mixin);

    if (old) {
      service.before(old);
    }
  };
};

var _feathersCommons = require('feathers-commons');

var _commons = require('./commons');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.exports = exports['default'];