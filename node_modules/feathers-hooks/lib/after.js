'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (service) {
  if (typeof service.mixin !== 'function') {
    return;
  }

  var methods = this.methods;
  var old = service.after;

  (0, _commons.addHookMethod)(service, 'after', methods);

  var mixin = {};

  methods.forEach(function (method) {
    if (typeof service[method] !== 'function') {
      return;
    }

    mixin[method] = function () {
      var originalCallback = arguments[arguments.length - 1];

      // Call the _super method which will return the `before` hook object
      return this._super.apply(this, arguments)
      // Make a copy of hookObject from `before` hooks and update type
      .then(function (hookObject) {
        return Object.assign({}, hookObject, { type: 'after' });
      })
      // Run through all `after` hooks
      .then(_commons.processHooks.bind(this, this.__afterHooks[method]))
      // Convert the results and call the original callback if available
      .then(function (hookObject) {
        var callback = hookObject.callback || originalCallback;

        if (typeof callback === 'function') {
          hookObject.callback(null, hookObject.result);
        }

        return hookObject.result;
      }).catch(function (error) {
        var callback = error && error.hook && error.hook.callback || originalCallback;

        if (typeof callback === 'function') {
          callback(error);
        }

        throw error;
      });
    };
  });

  service.mixin(mixin);

  if (old) {
    service.after(old);
  }
};

var _commons = require('./commons');

module.exports = exports['default'];