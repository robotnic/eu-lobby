#!/usr/bin/env node
'use strict';

/* Based on cscott’s binary for the lzma-purejs library, licensed under BSD license */

var program = require('commander');
var lzma = require('../');
var fs = require('fs');

program
	.version(lzma.version)
	.usage('-d|-z [infile] [outfile]')
	.option('-d, --decompress',
		'Decompress stdin to stdout')
	.option('-z, --compress',
		'Compress stdin to stdout')
	.option('-t, --threads [number]',
		'Use threads for encoding')
	.option('-1', 'Fastest/largest compression')
	.option('-2')
	.option('-3')
	.option('-4')
	.option('-5')
	.option('-6')
	.option('-7')
	.option('-8')
	.option('-9', 'Slowest/smallest compression');
program.on('--help', function() {
	console.log('  If <infile> is omitted, reads from stdin.');
	console.log('  If <outfile> is omitted, writes to stdout.');
});
program.parse(process.argv);

if (!program.decompress) 
	program.compress = true;

if (program.decompress && program.compress) {
	console.error('Must specify either -d or -z.');
	process.exit(1);
}

var level = null;
for (var l = 1; l <= 9; l++) {
	if (program[''+l]) {
		if (level) {
			console.error("Can’t specify both -"+level+" and -"+l);
			return;
		}
		
		level = l;
	}
}

if (level && program.decompress) {
	console.error('Compression level has no effect when decompressing.');
	process.exit(1);
}

var input = process.stdin, output = process.stdout;
var usesStdout = true;

if (program.args.length > 0)
	input = fs.createReadStream(program.args.shift());
if (program.args.length > 0) {
	output = fs.createWriteStream(program.args.shift());
	usesStdout = false;
}

var opts = { preset: level || lzma.PRESET_DEFAULT };

opts.threads = program.threads || undefined;
if (opts.threads === true) {
	opts.threads = 0;
}

var encoder = lzma.createStream(program.compress ? 'easyEncoder' : 'autoDecoder', opts);

input.pipe(encoder).pipe(output);

